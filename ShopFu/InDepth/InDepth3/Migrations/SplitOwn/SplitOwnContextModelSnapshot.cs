// <auto-generated />
using InDepth.Relationship;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InDepth.Migrations.SplitOwn
{
    [DbContext(typeof(SplitOwnContext))]
    partial class SplitOwnContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("InDepth.Relationship.ReDomain.BookDetail", b =>
                {
                    b.Property<int>("BookDetailId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BookDetailId");

                    b.ToTable("Books", (string)null);
                });

            modelBuilder.Entity("InDepth.Relationship.ReDomain.BookSummary", b =>
                {
                    b.Property<int>("BookSummaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookSummaryId"), 1L, 1);

                    b.Property<string>("AuthorsString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookSummaryId");

                    b.ToTable("Books", (string)null);
                });

            modelBuilder.Entity("InDepth.Relationship.ReDomain.OrderInfo", b =>
                {
                    b.Property<int>("OrderInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderInfoId"), 1L, 1);

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderInfoId");

                    b.ToTable("OrderInfo");
                });

            modelBuilder.Entity("InDepth.Relationship.ReDomain.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("InDepth.Relationship.ReDomain.BookDetail", b =>
                {
                    b.HasOne("InDepth.Relationship.ReDomain.BookSummary", null)
                        .WithOne("Details")
                        .HasForeignKey("InDepth.Relationship.ReDomain.BookDetail", "BookDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InDepth.Relationship.ReDomain.OrderInfo", b =>
                {
                    b.OwnsOne("InDepth.Relationship.ReDomain.Address", "BillingAddress", b1 =>
                        {
                            b1.Property<int>("OrderInfoId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CountryCodeIso2")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("nvarchar(2)");

                            b1.Property<string>("NumberAndStreet")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipPostCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderInfoId");

                            b1.ToTable("OrderInfo");

                            b1.WithOwner()
                                .HasForeignKey("OrderInfoId");
                        });

                    b.OwnsOne("InDepth.Relationship.ReDomain.Address", "DeliveryAddress", b1 =>
                        {
                            b1.Property<int>("OrderInfoId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CountryCodeIso2")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("nvarchar(2)");

                            b1.Property<string>("NumberAndStreet")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipPostCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderInfoId");

                            b1.ToTable("OrderInfo");

                            b1.WithOwner()
                                .HasForeignKey("OrderInfoId");
                        });

                    b.Navigation("BillingAddress")
                        .IsRequired();

                    b.Navigation("DeliveryAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("InDepth.Relationship.ReDomain.User", b =>
                {
                    b.OwnsOne("InDepth.Relationship.ReDomain.Address", "HomeAddress", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CountryCodeIso2")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("nvarchar(2)");

                            b1.Property<string>("NumberAndStreet")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipPostCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("Addresses", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("HomeAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("InDepth.Relationship.ReDomain.BookSummary", b =>
                {
                    b.Navigation("Details")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
